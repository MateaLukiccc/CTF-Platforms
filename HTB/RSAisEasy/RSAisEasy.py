#!/usr/bin/env python3
from Crypto.Util.number import bytes_to_long, getPrime,inverse,long_to_bytes
from factordb.factordb import FactorDB

#from secrets import flag1, flag2
from os import urandom

#flag1 = bytes_to_long(flag1)
#flag2 = bytes_to_long(flag2)

p, q, z = [getPrime(512) for i in range(3)]
p=12040644312371555810530782070969893153760288255333349208608058511112776958879208815174991008199408527954332776642365069284747758115478414463195873149420483
q=8413387656561188778435613942028835678781206299389177514340760123063579360223360470566083306606450007991287094526418200038784207648097820069671213638771543

e = int("10001",16)

n1 = p * q
n2 = q * z

c1 = 92506893588979548794790672542461288412902813248116064711808481112865246689691740816363092933206841082369015763989265012104504500670878633324061404374817814507356553697459987468562146726510492528932139036063681327547916073034377647100888763559498314765496171327071015998871821569774481702484239056959316014064
#pow(flag1, e, n1)
c2 = 46096854429474193473315622000700040188659289972305530955007054362815555622172000229584906225161285873027049199121215251038480738839915061587734141659589689176363962259066462128434796823277974789556411556028716349578708536050061871052948425521408788256153194537438422533790942307426802114531079426322801866673
#pow(flag2, e, n2)

E = bytes_to_long(urandom(69))

n1= 101302608234750530215072272904674037076286246679691423280860345380727387460347553585319149306846617895151397345134725469568034944362725840889803514170441153452816738520513986621545456486260186057658467757935510362350710672577390455772286945685838373154626020209228183673388592030449624410459900543470481715269
c1= 92506893588979548794790672542461288412902813248116064711808481112865246689691740816363092933206841082369015763989265012104504500670878633324061404374817814507356553697459987468562146726510492528932139036063681327547916073034377647100888763559498314765496171327071015998871821569774481702484239056959316014064
c2= 46096854429474193473315622000700040188659289972305530955007054362815555622172000229584906225161285873027049199121215251038480738839915061587734141659589689176363962259066462128434796823277974789556411556028716349578708536050061871052948425521408788256153194537438422533790942307426802114531079426322801866673
#(n1 * E) + n2
x= 601613204734044874510382122719388369424704454445440856955212747733856646787417730534645761871794607755794569926160226856377491672497901427125762773794612714954548970049734347216746397532291215057264241745928752782099454036635249993278807842576939476615587990343335792606509594080976599605315657632227121700808996847129758656266941422227113386647519604149159248887809688029519252391934671647670787874483702292498358573950359909165677642135389614863992438265717898239252246163

n2=x%n1
n2=100136903041423020991425823526737746365573197640035952973693624809721624428963253203282593974533722584391447008912397042291986993273828302711324440847902763039627790146764630023926517236880457533976468679976683705170312329736955922713306570804595070537102421450884645497775455984735279182873866159334387494837

f=FactorDB(n1)
f.connect()
p=f.get_factor_list()[0]
q=f.get_factor_list()[1]

phi=(p-1)*(q-1)

d=inverse(e,phi)

m1=pow(c1,d,n1)

f=FactorDB(n2)
f.connect()
p=f.get_factor_list()[0]
q=f.get_factor_list()[1]

phi=(p-1)*(q-1)

d2=inverse(e,phi)

m2=pow(c2,d2,n2)

print(long_to_bytes(m1)+long_to_bytes(m2))
